package com.porui.webapi.system.ys;

import java.nio.file.Files;
import java.nio.file.Paths;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.common.json.JSONArray;
import com.alibaba.dubbo.common.json.JSONObject;
import com.ezviz.open.push.EzvizOpenPushClientBuilder;
import com.ezviz.open.push.inner.domain.bo.AlarmMessage;
import com.ezviz.open.push.inner.domain.bo.DeviceMessage;
import com.ezviz.open.push.inner.exception.EzvizPushException;
import com.ezviz.open.push.processor.MessageProcessorAdapter;
import com.porui.hjl.commons.properties.AppContext;
import com.porui.hjl.commons.utils.HttpSendShort;
import com.porui.hjl.commons.utils.StringUtils;
import com.porui.hjl.commons.utils.YSUtils;
import com.porui.hjl.provider.res.entity.safety.RSAlarmMessage;
import com.porui.hjl.provider.res.entity.safety.RSDevice;
import com.porui.hjl.provider.res.service.safety.IAlarmMessageService;
import com.porui.hjl.provider.res.service.safety.IDeviceService;
import com.porui.hjl.provider.user.entity.UMRoom;
import com.porui.hjl.provider.user.service.IRoomService;
import com.porui.webapi.system.delayDefence.DelayAlarmService;
import com.porui.webapi.system.util.SafeTyUtils;

/**
 * 接收萤石报警推送
 * Created by pichun on 2017-5-16.
 */
public class YsServerListen extends Thread{
	
	@Autowired
	DelayAlarmService delayAlarmService;
	
    private Logger logger= LoggerFactory.getLogger(YsServerListen.class);
    private IAlarmMessageService alarmMessageService;
    private IDeviceService deviceService;
    private IRoomService roomService;
    private String appKey;
    private String secret;
    private String pushSecret;
    
    
    
    public YsServerListen(IAlarmMessageService alarmMessageService, IDeviceService deviceService,IRoomService roomService,String appKey,String secret,String pushSecret) {
		super();
		this.alarmMessageService = alarmMessageService;
		this.deviceService = deviceService;
		this.roomService = roomService;
		this.appKey = appKey;
		this.secret = secret;
		this.pushSecret = pushSecret;
	}


    public void test() {
    	try {
			logger.info("test------------收到萤石报警消息");
			RSDevice device = deviceService.getBySerial("839924914");
			logger.info("test------------获取到RSDevice");
			UMRoom room = roomService.getRoom(device.getRoomId());
			logger.info("test------------获取到ROOM"+com.alibaba.fastjson.JSONObject.toJSONString(room));
			if ("1".equals(room.getDelayAlarm())) {
				logger.info("test------------进入到延迟推送处理流程"+room.getId());
				// 有延迟报警功能
				Boolean needAlarm = delayAlarmService.delayAlarm(room, null);
				if (needAlarm) {
					// 推送
					logger.info("test delaytime -------------模拟推送");
				}
			} else {
				// 直接推送
				logger.info("test -------------模拟推送");
			}
			
		}catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//push Secret: f23185e7-611f-421f-8aaf-af7dab38f342
    @Override
    public void run() {
        try {
        	System.setProperty("zone.push.domain", "push.ys7.com");
			System.setProperty("zone.push.port", "443");
		
			System.setProperty("zone.auth.domain", "auth.ys7.com");
		
			System.setProperty("zone.open.domain", "open.ys7.com");
		
			System.setProperty("sus.prefix.wh", "https://whpic.ys7.com:8009/p/");
		
			System.setProperty("sus.prefix.ys", "https://i.ys7.com/c/");
    		
    		// 初始化EzvizPushClient
    		EzvizOpenPushClientBuilder.initClient(appKey, secret, pushSecret, 
    											  new MessageProcessorAdapter() {
    			/**
    			 * 处理报警消息，不需要则不重写
    			 */
    			@Override
    			public void processAlarmMessage(AlarmMessage message) {
					try {
						logger.info("收到萤石报警消息AlarmMessage："+JSON.json(message));
						RSDevice device = deviceService.getBySerial(message.getSn());
						
						UMRoom room = roomService.getRoom(device.getRoomId());
						if ("1".equals(room.getDelayAlarm())) {
							// 有延迟报警功能
							Boolean needAlarm = delayAlarmService.delayAlarm(room, message);
							if (needAlarm) {
								// 推送
								processAlarm(room, device, message);
							}
						} else {
							// 直接推送
							processAlarm(room, device, message);
						}
						
					}catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
    			}
    			
    			/**
    			 * 处理设备消息，不需要则不重写
    			 */
    			@Override
    			public void processDeviceMessage(DeviceMessage message) {
    				try {
    					logger.info("收到萤石设备消息DeviceMessage："+JSON.json(message));
						String url = "http://"+AppContext.getInstance().getProperty("hjlurl")+":"+AppContext.getInstance().getProperty("server.port");
						StringBuffer sb = new StringBuffer();
						HttpSendShort.sendStrOfPost(url+"/send/sendDeviceMessage", "","content="+JSON.json(message),  sb);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
    			}
    			 
    		});
    		 
    		// 启动EzvizPushClient
    		EzvizOpenPushClientBuilder.clientStart();
    		synchronized (YsServerListen.class) {
                while (true) {
                    try {
                    	YsServerListen.class.wait();
                    	logger.info("-------------------萤石推送线程结束");
                    } catch (InterruptedException e) {
                        logger.error("== synchronized error:",e);
                    }
                }
            }
//    		logger.info("-------------------萤石推送线程结束");
    		// block
    		// stop EzvizPushClient
        } catch (Exception e) {
        	try {
				EzvizOpenPushClientBuilder.clientStop();
			} catch (EzvizPushException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
            logger.error("萤石推送服务启动失败",e);
        }
    }
    
    public void processAlarm(UMRoom room, RSDevice device, AlarmMessage message) throws Exception {
    	RSAlarmMessage alarmMessage = new RSAlarmMessage();
		alarmMessage.setDeviceName(device.getName());
		alarmMessage.setId(StringUtils.getUUID());
		alarmMessage.setBrandId("1");
		alarmMessage.setRoomId(device.getRoomId());
		alarmMessage.setMsgType(message.getMsgType());
		alarmMessage.setAlarmType(message.getAlarmType());
		alarmMessage.setTime(message.getTime());
		alarmMessage.setDeviceSerial(message.getSn());
		alarmMessage.setDetectorSerial(message.getDsn());
		alarmMessage.setComId(room.getComId());
		alarmMessage.setBuildingId(room.getBuilding());
		alarmMessage.setIsReadApp("0");
		alarmMessage.setIsReadPc("0");
		alarmMessage.setDeleteStatusApp("1");
		alarmMessage.setDeleteStatusPc("1");
		alarmMessage.setFloorId(room.getFloor());
		alarmMessage.setAlarmPicUrl(message.getPicUrl());
		alarmMessage.setChannelNo(message.getCn());
		if(StringUtils.isNotBlank(message.getDsn())){
			JSONObject job = new JSONObject();
	    	String ret = YSUtils.getAdminAccessTokenJson(appKey, secret);
	    	job = (JSONObject)JSON.parse(ret);
	    	StringBuffer sbDetector = new StringBuffer();
	    	HttpSendShort.sendStrOfPost("https://open.ys7.com/api/lapp/detector/list", "accessToken="+job.getObject("data").getString("accessToken")+"&deviceSerial="+message.getSn(), "", sbDetector);
	    	job = (JSONObject)JSON.parse(sbDetector.toString());
	    	JSONArray jsonArray = job.getArray("data");
	    	for(int i = 0 ; i < jsonArray.length() ; i ++){
	    		if(message.getDsn().equals(jsonArray.getObject(i).getString("detectorSerial"))){
	    			alarmMessage.setDetectorName(jsonArray.getObject(i).getString("location"));
	    		}
	    	}
		}
		try{
			String imgUrl = AppContext.getInstance().getProperty("imgBackGround");
			String detectorSerial = message.getDsn();
			String deviceSerial = message.getSn();
			String childAccessToken = YSUtils.getAdminAccessToken(appKey, secret);
			if(StringUtils.isNotBlank(detectorSerial)){
				//探测器报警使用探测器图片
				StringBuffer sb = new StringBuffer();
				HttpSendShort.sendStrOfPost("https://open.ys7.com/api/lapp/detector/list", "accessToken="+childAccessToken+"&deviceSerial="+deviceSerial, "", sb);
				JSONArray array = ((JSONObject)JSON.parse(sb.toString())).getArray("data");
		    	if(array!=null){
			    	for(int i = 0 ; i < array.length() ; i ++){
			    		JSONObject object = array.getObject(i);
			    		if(detectorSerial.equals(object.getString("detectorSerial"))){
			    			if(object.getString("detectorType").toLowerCase().equals("callhelp")){
			    				alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_jinjianniu@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("gas")){
				    			alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_ranqiganyingqi@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("magnetometer")){
				    			alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_menci@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("waterlogging")){
				    			alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_shuiqinchuangganqi@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("pir")){
				    			alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_hongwaiganyingqi@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("move_magnetometer")){
				    			alarmMessage.setAlarmDeviceImgUrl(imgUrl+"/detector/icon_dantimenci@3x.png");
				    		}
				    		if(object.getString("detectorType").toLowerCase().equals("fire")){
				    			alarmMessage.setAlarmDeviceImgUrl("/detector/icon_yanwuganyingqi@3x.png");
				    		}
			    		}
			    	}
		    	}
				
			}else{
				//设备报警使用设备图片
				alarmMessage.setAlarmDeviceImgUrl(device.getImgUrl());
			}
		}catch(Exception e){
			logger.info("萤石报警消息查询萤石接口出错",e);
		}
		alarmMessage.setAlarmTypeName(SafeTyUtils.getYSAlarmTypeName(alarmMessage.getAlarmType()));
		
		try{
			if(StringUtils.isNotBlank(alarmMessage.getAlarmPicUrl())){
				String imgUrl = null;
				try {
					imgUrl = AppContext.getInstance().getProperty("imgBackGround");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				String directory = "safetyMsg";
				if(!Files.exists(Paths.get(imgUrl,directory))){
					Files.createDirectories(Paths.get(imgUrl,directory));
				}
				String fileName = StringUtils.getUUID();
				Files.copy(HttpSendShort.getPicFromInternet(alarmMessage.getAlarmPicUrl()), Paths.get(imgUrl, directory,fileName));
				alarmMessage.setAlarmPicUrl(Paths.get(imgUrl, directory,fileName).toString().replaceAll("\\\\", "/"));
			}
			alarmMessage.setAlarmPicStatus("1");
		}catch(Exception e){
			logger.info("拉取萤石报警图片出错！",e);
			alarmMessage.setAlarmPicStatus("2");
		}
		
		alarmMessageService.add(alarmMessage);
		
		logger.info("收到萤石报警消息AlarmMessage："+JSON.json(message));
		String url = "http://"+AppContext.getInstance().getProperty("hjlurl");
		StringBuffer sb = new StringBuffer();
		HttpSendShort.sendStrOfPost(url+"/send/sendAlarmMessage",  "myMsgId="+alarmMessage.getId(),"content="+JSON.json(message), sb);
		
		logger.info("推送了...");
	}
    
//    public static void main(String[] args) throws IOException, Exception {
//		String url = "https://open.ys7.com:443/api/alarm/sus/download?susUrl=https://i.ys7.com/c/evqHXH_686218811?accessToken=at.5s9mkj6g81ldaod22k2zndx6cwchh0v5-5j1kwlrpuu-1og4i4h-7oe32ohpf";
//		Files.copy(HttpSendShort.getPicFromInternet(url), Paths.get("D://", "1233333"));
//	}
    
}
