package com.porui.hjl.app.device.socketServer.mina;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Map.Entry;

import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;

import com.alibaba.dubbo.common.json.JSON;
import com.alibaba.dubbo.common.json.JSONObject;
import com.porui.hjl.app.crestron.entity.APPSafetyPosition;
import com.porui.hjl.app.device.properties.AppContext;
import com.porui.hjl.commons.utils.HttpSendShort;

/**
 * Created by tablv on 2018-03-23.
 * 
 * @Description:分包传数据（每个包前面4个byte为长度）
 */

public class NewCentralSokectServer extends MinaSocketServer {

	private static NewCentralSokectServer newCentralSokectServer = null;	
	/**
	 * key：房间中控Mac,value:socket连接sessionID
	 */
	private HashMap<String, Long> clients = new HashMap<>();

	public static NewCentralSokectServer getInstance() {
		if (null == newCentralSokectServer) {
			newCentralSokectServer = new NewCentralSokectServer();
		}
		return newCentralSokectServer;
	}
	
	@Override
	public boolean start() {
		try {
			String port = AppContext.getInstance().getProperty("nwsocketPort");
			startServer(port, new IoHandlerAdapter() {
				@Override
				public void exceptionCaught(IoSession session, Throwable cause) throws Exception {
					super.exceptionCaught(session, cause);
					logger.error("exceptionCaught===", cause);
				}

				@Override
				public void sessionClosed(IoSession session) throws Exception {
					super.sessionClosed(session);
					logger.info("sessionClosed ： Remove  clients--> "+session.getAttribute("central"));
					
				}

				@Override
				public void messageReceived(IoSession session, Object message) throws Exception {					
					
					try {
						
						String reMsg = new String((byte[])message, "utf-8");						
						boolean isAndroid=false;
						if(reMsg.endsWith("android")){
							reMsg=reMsg.substring(0, reMsg.length()-7);
							isAndroid=true;
						}
						
						logger.info("messageReceived ..................msg : "+reMsg );
						
						// 中控设备登记
						if (reMsg.endsWith("address")) {
							reMsg=reMsg.toLowerCase();
							logger.info("Centrl register ok  : "+reMsg +" : "+session.getId());
							session.setAttribute("central", reMsg);						
							session.setAttribute("isAndroid", isAndroid);
							clients.put(reMsg, session.getId());						
						}else{
							String central = (String) session.getAttribute("central");
							if (msg.endsWith("0b0c")) {
								// 安防
								Map<String, String> roomMap = appService.getRoomByDeviceMac(central);
								if (roomMap == null) {
									return;
								}
								Map<String,String> headerMap = new HashMap<String,String>();
								headerMap.put("Authorization", "admin");
								StringBuffer defenceResponseBuffer = new StringBuffer();
								HttpSendShort.sendStrOfGet("http://127.0.0.1:9202/ys/getDefenceType", "roomId="+roomMap.get("id"), defenceResponseBuffer, headerMap);
								JSONObject parseObject = (JSONObject)JSON.parse(defenceResponseBuffer.toString());
								if("1".equals(parseObject.getString("status"))){
									logger.info("获取住房安防状态失败");
									return;
						    	}
								long defenceType = (long)parseObject.get("data");
								
								Map<String, String> safetyPositionMap = new HashMap<String, String>();
								List<APPSafetyPosition> safetyList = appService.getList(null);
								for (APPSafetyPosition appSafetyPosition : safetyList) {
									safetyPositionMap.put(appSafetyPosition.getCode(), appSafetyPosition.getName());
								}
								String controlCode = msg.substring(10,12);//控制命令
								String data = msg.substring(12,msg.length()-4);//控制命令
								if (controlCode.equals("14") && data.equals("0400")) {
									// 查询安防状态-> 返回状态
									// 最新的布防状态
									if (defenceType == 1) {
											// 撤防
											String commandString = "BB66EE00034041000B0C";
											logger.info("发送撤防给中控");
											logger.info(appService.sentToCenter(central, commandString.toLowerCase().getBytes()));
									} else if (defenceType == 2) {
											// 布防
											String commandString = "BB66EE00034040000B0C";
											logger.info("发送布防给中控");
											logger.info(appService.sentToCenter(central, commandString.toLowerCase().getBytes()));
									}
									
								} else if (controlCode.equals("14") && data.equals("0100")) {
									//安防报警反馈 <- 0100 有人
									logger.info("中控上报消息有人");
									String position = msg.substring(6,8);//位置
									String positionName = safetyPositionMap.get(position);
									try{
										headerMap = new HashMap<String,String>();
										headerMap.put("Authorization", "admin");
										StringBuffer sb = new StringBuffer();
										StringBuffer querySb = new StringBuffer();
										querySb.append("deviceMac="+central).append("&").append("positionName="+positionName).append("&").append("alarmType="+"01");
										
										HttpSendShort.sendStrOfPost("http://127.0.0.1:9202/api/crestron/receiveMsg", querySb.toString(), "", sb, headerMap);
										parseObject = (JSONObject)JSON.parse(sb.toString());
										if("1".equals(parseObject.getString("status"))){
											logger.info("报警消息上报到接口层失败");
								    	}
									}catch(Exception e){
										logger.info("报警消息上报到接口层失败",e);
									}
								}
								
							} else if(reMsg.startsWith("hjlbl")){							
								for(String appPre:AppSocketServer.MAC_APP_PRE){
									sendMessage2AppClient(appPre + central, reMsg);
									Thread.sleep(50);
								}							
							}						
						}
					} catch (Exception e) {
						logger.info(" messageReceived Exception ",e);
					}
					
				}

				@Override
				public void sessionOpened(IoSession session) throws Exception {
					logger.info("messageReceived sessionOpened。。。。。。。。。。。。。。。。。。。。");
				}
				
				
			});		
			
			if(timer==null){
				timer=new Timer(true);
			}
			String heartBeatTimeoutSecs = AppContext.getInstance().getProperty("heartBeatTimeoutSecs");
			timer.schedule(new TimerTask() {
				
				@Override
				public void run() {
					try {
						checkAndSendHeartPKG("newcentral");
					} catch (Exception e) {
						logger.error("----sendAndroidCentral Exception--------");
					}					
				}
			}, 10000, Integer.parseInt(heartBeatTimeoutSecs) * 1000);
			
			working = true;
			logger.info("NewCentralSokectServer launcher port:" + port);
			return true;
		} catch (Exception e) {
			logger.error("==start Exception==", e);
		}
		return false;
	}
	
	private void checkAndSendHeartPKG(String msg) throws Exception{
    	Set<Entry<Long, IoSession>> entrySet = acceptor.getManagedSessions().entrySet();
		for (Entry<Long, IoSession> entry : entrySet) {			
			IoSession iosession = entry.getValue();
			if(null!=iosession){
				String zkMac = (String)iosession.getAttribute("central", null);
				if(null!=zkMac&&clients.containsKey(zkMac)){					
					boolean isAndroid=(boolean)iosession.getAttribute("isAndroid", false);
					logger.info("find session zkMac : "+zkMac+" isAndroid : "+isAndroid);
					if(isAndroid){
						iosession.write(msg.getBytes());
					}
				}else{
					logger.info("this session is illegal connection  "+zkMac+" : "+iosession.getId());
					iosession.closeNow();
				}			
			}else{
				logger.info("sendAndroidCentral iosession is null.......");
			}
		}
	}
	

	@Override
	public ProtocolCodecFilter getProtocolCodecFilter() {
		
		return new ProtocolCodecFilter(new BatchByteCodecFactory());
	}
	
	private boolean sendMessage2AppClient(String room, String content) {
		boolean result=AppSocketServer.getInstance().sendMessage(room, content);
		return result;
	}
	
	public boolean sendMessage(String groupName, String content) throws Exception{		
		logger.info("sendMessage content  groupName:" + groupName + " content:" + content);
		byte[] bytes = content.getBytes();	
		return sendMessage(groupName, bytes);
	}

	
	  /** 
	   * @Description 方法的作用
	   * @param 参数
	   * @return 返回类型
	   * @throws
	   */ 
        private boolean sendMessage(String groupName, byte[] bytes) throws Exception{
		//logger.info("sendMessage byte[]....."+MD5.byteArrayToHexString(bytes));
		if (!working) {
			logger.info("socket server is closed..........groupName : " + groupName);
			return false;
		}
		if(null!=groupName){
			groupName=groupName.toLowerCase();			
		}
		try {
			if ("@all".equals(groupName)) {
				//sendMsg2AllClients(bytes);
			} else {
	            Long sessionId = clients.get(groupName);
	            logger.info("send messge..........groupName ：sessionId : " +groupName+" : "+sessionId);
	            if(null!=sessionId){
	            	IoSession ioSession = acceptor.getManagedSessions().get(sessionId);
	            	logger.info("send messge..........ioSession : " + ioSession+" bytes.size : "+bytes.length);
	            	if(null!=ioSession){	            	
	            		ioSession.write(bytes);            		
	            	}else{
	            		return false;
	            	}
	            }else{
	            	return false;
	            }
			}
			return true;
		} catch (Exception e) {
			logger.error("== sendMessage Exception ==", e);
		}		
		
		return false;
			
	}
	

}
