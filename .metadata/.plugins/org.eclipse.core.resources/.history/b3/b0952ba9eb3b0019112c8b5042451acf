package com.porui.hjl.app.device.socketServer.mina;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.common.json.JSON;
import com.alibaba.dubbo.common.json.JSONObject;
import com.porui.hjl.app.crestron.entity.APPPosition;
import com.porui.hjl.app.crestron.entity.APPSafetyPosition;
import com.porui.hjl.app.crestron.service.IAppService;
import com.porui.hjl.app.crestron.service.ISafetyPositionService;
import com.porui.hjl.app.device.properties.AppContext;
import com.porui.hjl.app.device.socketServer.socketio.TabletsSocketServer;
import com.porui.hjl.app.device.util.AnalyManage;
import com.porui.hjl.commons.cache.RedisUtils;
import com.porui.hjl.commons.security.MD5;
import com.porui.hjl.commons.utils.HttpSendShort;

import shaded.org.apache.commons.lang3.StringUtils;

/**
 * Created by tablv on 2017-09-22.
 * 
 * @Description:住房中控长连接类
 */

public class CentralSocketServer extends MinaSocketServer {

	private static CentralSocketServer centralSocketServer = null;

	private String iosKey = "ios-";

	private String androidKey = "android-";

	/**
	 * key：房间中控Mac,value:socket连接sessionID
	 */
	private HashMap<String, Long> clients = new HashMap<>();

	public static CentralSocketServer getInstance(IAppService appService) {

		if (centralSocketServer == null) {
			centralSocketServer = new CentralSocketServer();
			centralSocketServer.appService = appService;
		}

		return centralSocketServer;
	}
	
	private IAppService appService;
	
	private boolean msgDebug=false;
	
	
	
	
	/**
	 * 创建一个新的实例 CentralSocketServer.
	 */

	private CentralSocketServer() {
		timer=new Timer(true);
	}
	
	

	@Override
	public boolean start() {
		try {
			String port = AppContext.getInstance().getProperty("socketPort");
			startServer(port, new IoHandlerAdapter() {
				@Override
				public void exceptionCaught(IoSession session, Throwable cause) throws Exception {
					super.exceptionCaught(session, cause);
					logger.error("exceptionCaught===", cause);
				}

				@Override
				public void sessionClosed(IoSession session) throws Exception {
					super.sessionClosed(session);
					String mac = session.getAttribute("central").toString();					
					if(isExsitClient(mac)){		
						
						if(StringUtils.isNotBlank(mac)){							
							clients.remove(mac);
							logger.info("sessionClosed ： Remove  clients--> "+mac);	
							
							try{
								//记录主机下线日志
								Map<String,String> headerMap = new HashMap<String,String>();
								headerMap.put("Authorization", "admin");
								StringBuffer sb = new StringBuffer();
								HttpSendShort.sendStrOfPost("http://127.0.0.1:9202/api/engineLog/add", "deviceMac="+mac, "", sb, headerMap);
								JSONObject parseObject = (JSONObject)JSON.parse(sb.toString());
								if("1".equals(parseObject.getString("status"))){
									logger.info("记录主机下线日志接口调用失败");
						    	}
							}catch(Exception e){
								logger.info("记录主机下线日志出错！！！",e);
							}
						}						
										
					}else {
						logger.info("this session maybe doubble register address....");	
				   }
				}

				@Override
				public void messageReceived(IoSession session, Object message) throws Exception {
					String reMsg = new String((byte[])message, "utf-8");
				    boolean isAndroid=false;
					if (!reMsg.trim().endsWith("address")&&!reMsg.trim().endsWith("android")&&!reMsg.trim().endsWith("hjlbl")) {
						reMsg = MD5.byteArrayToHexString((byte[])message);
					}	
					String msg = null;
					
					if(!reMsg.endsWith("hjlbl")){
						msg=reMsg.trim().toLowerCase();
					}else{
						msg=reMsg.trim();
					}					
					
					if(msg.endsWith("android")){
						msg=msg.substring(0, msg.length()-7);
						isAndroid=true;
					}
					
					if(msgDebug){
						logger.info("messageReceived message....msg:" + msg);
						return;
					}

					logger.info("messageReceived ..................msg : "+msg );
					
					// 中控设备登记
					if (msg.endsWith("address")) {
						logger.info("Centrl register ok  : "+msg +" : "+session.getId());
						session.setAttribute("central", msg);						
						session.setAttribute("isAndroid", isAndroid);
						clients.put(msg, session.getId());
						// 中控消息接收
					} else {
						String central = (String) session.getAttribute("central");
						List<APPPosition> positionList = appService.getPositionList(central);
						Map<String,String> positionMap = new HashMap<String,String>();
						for(APPPosition position : positionList){
							logger.info(position.getCode()+"------"+position.getId());
							positionMap.put(position.getCode(), position.getId());
						}
						logger.info("Central message....msg:" + msg + "  hexMsg:" + msg + " central:" + central);
						
						if (msg.endsWith("0b0c")) {
							// 安防
							Map<String, String> roomMap = appService.getRoomByDeviceMac(central);
							if (roomMap == null) {
								return;
							}
							Map<String, String> safetyPositionMap = new HashMap<String, String>();
							List<APPSafetyPosition> safetyList = appService.getList(null);
							for (APPSafetyPosition appSafetyPosition : safetyList) {
								safetyPositionMap.put(appSafetyPosition.getCode(), appSafetyPosition.getName());
							}
							String controlCode = msg.substring(10,12);//控制命令
							String data = msg.substring(12,msg.length()-4);//控制命令
							if (controlCode.equals("14") && data.equals("0400")) {
								// 查询安防状态-> 返回状态
								// 最新的布防状态
								if (RedisUtils.instance().get(roomMap.get("id").getBytes()) != null) {
									int defenceStatus = RedisUtils.instance().get(roomMap.get("id").getBytes());
									if (defenceStatus == 1) {
										// 撤防
										String commandString = "BB66EE00034041000B0C";
										appService.sentToCenter(central, commandString.toLowerCase());
									} else if (defenceStatus == 2) {
										// 布防
										String commandString = "BB66EE00034040000B0C";
										appService.sentToCenter(central, commandString.toLowerCase());
									}
								}
								
							} else if (controlCode.equals("14") && data.equals("0100")) {
								//安防报警反馈 <- 0100 有人
								String position = msg.substring(6,8);//位置
								String positionName = safetyPositionMap.get(position);
								try{
									Map<String,String> headerMap = new HashMap<String,String>();
									headerMap.put("Authorization", "admin");
									StringBuffer sb = new StringBuffer();
									StringBuffer querySb = new StringBuffer();
									querySb.append("deviceMac="+central).append("&").append("positionName="+positionName).append("&").append("alarmType="+"01");
									
									HttpSendShort.sendStrOfPost("http://127.0.0.1:9202/api/crestron/receiveMsg", querySb.toString(), "", sb, headerMap);
									JSONObject parseObject = (JSONObject)JSON.parse(sb.toString());
									if("1".equals(parseObject.getString("status"))){
										logger.info("报警消息上报到接口层失败");
							    	}
								}catch(Exception e){
									logger.info("报警消息上报到接口层失败",e);
								}
							}
							
						}
						else if (msg.endsWith("0d0a")) {
							// 发送消息到平板
							logger.info("0d0a sendMessage2PadClient CONTENT : " + msg);
							sendMessage2PadClient(central, "hjl", msg);
							JSONObject json = AnalyManage.getContent(msg.toUpperCase(),positionMap);
							StringBuffer sb = new StringBuffer();
							String intent = "syncUI" + (json.getString("deviceType").equals("1") ? "Light"
									: json.getString("deviceType").equals("3") ? "Air" : json.getString("deviceType").equals("11")?"Wind":"");
							sb.append(intent);
							sb.append(JSON.json(json));
							sb.append(intent);
							sb.append(";");
							String content = sb.toString();
							logger.info("0d0a sendMessage2AppClient CONTENT : " + content);
							// 发送消息给App，ios/android在登记mac地址前加了对应前缀
							sendMessage2AppClient(androidKey + central, content);
							sendMessage2AppClient(iosKey + central, content);
						} else if (msg.endsWith("ffe7")) {
							List<Map<String,String>> list = appService.getHikeDeviceMac((String) session.getAttribute("central"));
							String weatherContent = "";
							if(list!=null&&list.size()>0){
								weatherContent = AnalyManage.getWeatherContent(msg,list.get(0).get("deviceMac"));
							}else{
								weatherContent = AnalyManage.getWeatherContent(msg,"");
							}
							logger.info("ffe7 sendMessage2PadClient CONTENT : " + weatherContent);
							sendMessage2PadClient(central, "hjl", "7E00" + weatherContent + "FFE7");
							StringBuffer sb = new StringBuffer();
							String intent = "syncUIEnv";
							sb.append(intent);
							sb.append(weatherContent);
							sb.append(intent);
							sb.append(";");
							String content = sb.toString();
							logger.info("ffe7 sendMessage2AppClient CONTENT : " + content);
							sendMessage2AppClient(androidKey + central, content);
							sendMessage2AppClient(iosKey + central, content);
						}else if(msg.endsWith("hjlbl")){
							sendMessage2AppClient(androidKey + central, msg);
							sendMessage2AppClient(iosKey + central, msg);
						}
					}
				}

				@Override
				public void sessionOpened(IoSession session) throws Exception {
					logger.info("messageReceived sessionOpened。。。。。。。。。。。。。。。。。。。。");
				}
				
				
			});
			String heartBeatTimeoutSecs = AppContext.getInstance().getProperty("heartBeatTimeoutSecs");
			
			if(timer==null){
				timer=new Timer(true);
			}
			timer.schedule(new TimerTask() {
				
				@Override
				public void run() {
					try {
						sendAndroidCentral("hjlappHeart");
					} catch (Exception e) {
						logger.error("----sendAndroidCentral Exception--------");
					}					
				}
			}, 10000, Integer.parseInt(heartBeatTimeoutSecs) * 1000);
			
			working = true;
			logger.info("CentralSocketServer launcher port:" + port);
			return true;
		} catch (Exception e) {
			logger.error("==start Exception==", e);
		}
		return false;
	}

	private boolean sendMessage2PadClient(String room, String event, String content){
		/*
		 * SocketIOManage.instance().socketIOServer.getRoomOperations(room).
		 * sendEvent(event, content.toUpperCase());
		 */
		boolean result = TabletsSocketServer.getInstance().sendMessage(room, event, content);
		return result;
	}

	private boolean sendMessage2AppClient(String room, String content) {
		boolean result=AppSocketServer.getInstance().sendMessage(room, content);
		return result;
	}
	
    private void sendAndroidCentral(String msg) throws Exception{
    	Set<Entry<Long, IoSession>> entrySet = acceptor.getManagedSessions().entrySet();
		for (Entry<Long, IoSession> entry : entrySet) {			
			IoSession iosession = entry.getValue();
			if(null!=iosession){				
				String zkMac = (String)iosession.getAttribute("central", null);				
				if(null!=zkMac&&isExsitClient(zkMac)){					
					boolean isAndroid=(boolean)iosession.getAttribute("isAndroid", false);
					logger.info("find session zkMac : "+zkMac+" isAndroid : "+isAndroid);
					if(isAndroid){
						iosession.write(msg.getBytes());
					}
				}else{
					logger.info("this session is illegal connection  "+zkMac+" : "+iosession.getId());
					iosession.closeNow();
				}				
			}else{
				logger.info("sendAndroidCentral iosession is null.......");
			}
		}    	
    	
	}

	  /** 
	   * @Description 方法的作用
	   * @param 参数
	   * @return 返回类型
	   * @throws
	   */ 
	public boolean sendMessage(String groupName, byte[] bytes) throws Exception{
		//logger.info("sendMessage byte[]....."+MD5.byteArrayToHexString(bytes));
		if (!working) {
			logger.info("socket server is closed..........groupName : " + groupName);
			return false;
		}
		if(null!=groupName){
			groupName=groupName.toLowerCase();			
		}
		try {
			if ("@all".equals(groupName)) {
				//sendMsg2AllClients(bytes);
			} else {
	            Long sessionId = clients.get(groupName);
	            logger.info("send messge..........groupName ：sessionId : " +groupName+" : "+sessionId);
	            if(null!=sessionId){
	            	IoSession ioSession = acceptor.getManagedSessions().get(sessionId);
	            	logger.info("send messge..........ioSession : " + ioSession+" bytes.size : "+bytes.length);
	            	if(null!=ioSession){	            	
	            		ioSession.write(bytes);            		
	            	}else{
	            		return false;
	            	}
	            }else{
	            	return false;
	            }
			}
			return true;
		} catch (Exception e) {
			logger.error("== sendMessage Exception ==", e);
		}		
		
		return false;
			
	}
	
	public boolean isExsitClient(String client){
		
		return clients.containsKey(client);
	}
		    
	@Override
	public ProtocolCodecFilter getProtocolCodecFilter() {
		
		return new ProtocolCodecFilter(new ByteArrayCodecFactory());
	}

}
