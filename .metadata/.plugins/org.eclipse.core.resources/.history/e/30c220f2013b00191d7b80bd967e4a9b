package com.porui.webapi.system.controller.safety;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.common.json.JSON;
import com.alibaba.dubbo.common.json.JSONArray;
import com.alibaba.dubbo.common.json.JSONObject;
import com.porui.hjl.app.crestron.service.IAppService;
import com.porui.hjl.commons.bean.socket.Push2WebMsg;
import com.porui.hjl.commons.properties.AppContext;
import com.porui.hjl.commons.utils.DateUtils;
import com.porui.hjl.commons.utils.StringUtils;
import com.porui.hjl.provider.res.entity.community.RSCommunity;
import com.porui.hjl.provider.res.entity.community.RSCommunitySafetyInfo;
import com.porui.hjl.provider.res.entity.community.RSFloor;
import com.porui.hjl.provider.res.entity.msg.RSUserMsg;
import com.porui.hjl.provider.res.entity.safety.RSAlarmMessage;
import com.porui.hjl.provider.res.entity.safety.RSDevice;
import com.porui.hjl.provider.res.entity.safety.RSDeviceModel;
import com.porui.hjl.provider.res.service.community.ICommunitySafetyInfoService;
import com.porui.hjl.provider.res.service.community.ICommunityService;
import com.porui.hjl.provider.res.service.community.IFloorService;
import com.porui.hjl.provider.res.service.msg.IUserMsgService;
import com.porui.hjl.provider.res.service.safety.IAlarmMessageService;
import com.porui.hjl.provider.res.service.safety.IDeviceModelService;
import com.porui.hjl.provider.res.service.safety.IDeviceService;
import com.porui.hjl.provider.user.entity.UMProRoom;
import com.porui.hjl.provider.user.entity.UMProprietor;
import com.porui.hjl.provider.user.entity.UMProprietorFamily;
import com.porui.hjl.provider.user.entity.UMRoom;
import com.porui.hjl.provider.user.entity.UMRoomSendIdLink;
import com.porui.hjl.provider.user.service.IProRoomService;
import com.porui.hjl.provider.user.service.IProprietorFamilyService;
import com.porui.hjl.provider.user.service.IProprietorService;
import com.porui.hjl.provider.user.service.IRoomSendService;
import com.porui.hjl.provider.user.service.IRoomService;
import com.porui.webapi.system.entity.safety.HaoenAlarmMessageEntity;
import com.porui.webapi.system.service.delayDefence.DelayAlarmService;
import com.porui.webapi.system.socket.MessagePushSocketServer;
import com.porui.webapi.system.util.Base64Utils;
import com.porui.webapi.system.util.HaoEnUtils;
import com.porui.webapi.system.util.PushUtils;
import com.porui.webapi.system.util.SafeTyUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;


/**
 * 豪恩安防
 * Created by pichun on 2017-04-01.
 */
@Api(value = "豪恩安防接口",description = "豪恩安防")
@RestController
@RequestMapping(value = "/api/haoen")
public class HaoenController {
	
    private Logger logger= LoggerFactory.getLogger(HaoenController.class);
    
    @Autowired
    private IDeviceService deviceService;
    
    @Autowired
    private ICommunityService communityService;
	
	@Autowired
    private IFloorService floorService;
    
    @Autowired
    private IDeviceModelService deviceModelService;
    
    @Autowired
    private IRoomService roomService;
    
    @Autowired
    private IAlarmMessageService alarmMessageService;
    
    @Autowired
    private IProRoomService proRoomService;
    
    @Autowired
    private IProprietorService proprietorService;
    
    @Autowired
    private IProprietorFamilyService proprietorFamilyService;
    
    @Autowired
    private IRoomSendService roomSendService;
    
    @Autowired
    private ICommunitySafetyInfoService communitySafetyInfoService;
    
    @Autowired
    private IUserMsgService userMsgService;
    
    @Autowired
    private IAppService appService;
    
    private static Map<String,String> haoenCategoryCode = new HashMap<String,String>();
    
    private static Map<String,String> haoenCategoryCodeImg = new HashMap<String,String>();
    
    static {
    	
    	haoenCategoryCode.put("33", "人体移动传感器");
    	haoenCategoryCode.put("49", "门磁");
    	haoenCategoryCode.put("65", "天然气报警设备");
    	haoenCategoryCode.put("81", "烟雾报警设备");
    	haoenCategoryCode.put("115", "水浸传感器报警设备");
    	haoenCategoryCode.put("145", "遥控器");
    	haoenCategoryCode.put("146", "紧急按钮");
    	haoenCategoryCode.put("161", "温度传感类设备");
    	
    	haoenCategoryCodeImg.put("33", "/detector/haoen/hongwai.png");
    	haoenCategoryCodeImg.put("49", "/detector/haoen/menci.png");
    	haoenCategoryCodeImg.put("65", "/detector/haoen/tianranqibaojingshebei.png");
    	haoenCategoryCodeImg.put("81", "/detector/haoen/yanwubaojingshebei.png");
    	haoenCategoryCodeImg.put("115", "/detector/haoen/shuiqinchuanganqibaojingshebei.png");
    	haoenCategoryCodeImg.put("145", "/detector/haoen/yaokongqi.png");
    	haoenCategoryCodeImg.put("146", "/detector/haoen/jinjianniu.png");
    	haoenCategoryCodeImg.put("161", "/detector/haoen/wenduchuanganleishebei.png");
    }
    
    @ApiOperation(value="添加设备", notes="添加设备")
    @ResponseBody
    @RequestMapping(value={"addDevice"}, method= RequestMethod.POST)
    public String addDevice(
		@ApiParam(required=true, name="barcode", value="条形码")@RequestParam(name = "barcode")String barcode,
		@ApiParam(required=true, name="macAddress", value="mac地址")@RequestParam(name = "macAddress")String macAddress,
		@ApiParam(required=true, name="type", value="设备类型（1-T1-2,1-T1-3）")@RequestParam(name = "type")String type,
		@ApiParam(required=true, name="encryptKey", value="设备秘钥")@RequestParam(name = "encryptKey")String encryptKey,
		@ApiParam(required=true, name="deviceModelId", value="设备型号Id")@RequestParam(name = "deviceModelId")String deviceModelId,
		@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId,
		@ApiParam(required=true, name="brandId", value="品牌ID")@RequestParam(name = "brandId")String brandId,
		@ApiParam(required=true, name="deviceType", value="设备类型（1：摄像头；2：网关）")@RequestParam(name = "deviceType")String deviceType) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	
    	Map<String,Object> body = new HashMap<String,Object>();
    	body.put("barcode", barcode);
    	body.put("macAddress", macAddress);
    	body.put("type", Integer.valueOf(type));
    	body.put("encryptKey", encryptKey);
    	StringBuffer sb = new StringBuffer();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	sb.append(HaoEnUtils.getHaoEnApi(body, null, "/devices", "POST", headerMap,room.getComId(),communitySafetyInfoService));
    	
    	if(StringUtils.isNotBlank(((JSONObject)JSON.parse(sb.toString())).getString("result"))){
    		
	        json.put("msg", "添加成功");
			json.put("status", "0");

        	RSDeviceModel deviceModelEntity = new RSDeviceModel();
        	deviceModelEntity.setId(deviceModelId);
        	logger.info(deviceModelId);
        	logger.info("添加设备------------------------,deviceModelId:"+"");
        	deviceModelEntity = deviceModelService.get(deviceModelEntity);
        	RSDevice device = new RSDevice();
    		device.setBrandId(brandId);
    		device.setDeviceModelId(deviceModelId);
    		device.setDeviceModelName(deviceModelEntity.getName());
    		device.setId(StringUtils.getUUID()+"@@@"+((JSONObject)JSON.parse(sb.toString())).getString("result"));
    		device.setImgUrl(deviceModelEntity.getImgUrl());
    		device.setRoomId(roomId);
    		device.setName(macAddress);
    		device.setCategoryCode(deviceType);
    		body.put("deviceId", ((JSONObject)JSON.parse(sb.toString())).getString("result"));
    		device.setJson(JSON.json(body));
    		deviceService.add(device);
        	
    	}else{
	        json.put("msg", "添加失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="删除设备", notes="删除设备")
    @ResponseBody
    @RequestMapping(value={"deleteDevice"}, method= RequestMethod.POST)
    public String deleteDevice(
    							@ApiParam(required=true, name="brandId", value="品牌ID")@RequestParam(name = "brandId")String brandId,
    							@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId,
    							@ApiParam(required=true, name="deviceId", value="设备ID")@RequestParam(name = "deviceId")String deviceId) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	
    	StringBuffer sb = new StringBuffer();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	
    	sb.append(HaoEnUtils.getHaoEnApi(null, null, "/devices/"+deviceId.split("@@@")[1], "DELETE", headerMap,room.getComId(),communitySafetyInfoService));
    	
//    	sendPost(urlHead+"/devices/"+deviceId, "", "", sb);
    	
    	if(1==(((JSONObject)JSON.parse(sb.toString())).getInt("result",0))){
	        json.put("msg", "删除成功");
			json.put("status", "0");
			RSDevice device = new RSDevice();
			device.setId(deviceId);
			device.setStatus("9");
			deviceService.delete(device);
    	}else{
	        json.put("msg", "删除失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="添加设备(t1-3)", notes="添加设备(t1-3)")
    @ResponseBody
    @RequestMapping(value={"addDeviceNew"}, method= RequestMethod.POST)
    public String addDeviceNew(
		@ApiParam(required=true, name="barcode", value="条形码")@RequestParam(name = "barcode")String barcode,
		@ApiParam(required=true, name="serverAddress", value="服务地址")@RequestParam(name = "serverAddre")String serverAddress,
		@ApiParam(required=true, name="encryptKey", value="设备秘钥")@RequestParam(name = "encryptKey")String encryptKey,
		@ApiParam(required=true, name="deviceModelId", value="设备型号Id")@RequestParam(name = "deviceModelId")String deviceModelId,
		@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId,
		@ApiParam(required=true, name="brandId", value="品牌ID")@RequestParam(name = "brandId")String brandId,
		@ApiParam(required=true, name="deviceType", value="设备类型（1：摄像头；2：网关）")@RequestParam(name = "deviceType")String deviceType) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	
    	Map<String,Object> body = new HashMap<String,Object>();
    	body.put("barcode", barcode);
    	body.put("serverAddress", serverAddress);
    	body.put("encryptKey", encryptKey);
    	StringBuffer sb = new StringBuffer();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	sb.append(HaoEnUtils.getHaoEnApi(body, null, "/devices/new", "POST", headerMap,room.getComId(),communitySafetyInfoService));
    	
    	if(StringUtils.isNotBlank(((JSONObject)JSON.parse(sb.toString())).getString("result"))){
    		
	        json.put("msg", "添加成功");
			json.put("status", "0");

        	RSDeviceModel deviceModelEntity = new RSDeviceModel();
        	deviceModelEntity.setId(deviceModelId);
        	logger.info(deviceModelId);
        	logger.info("添加设备------------------------,deviceModelId:"+"");
        	deviceModelEntity = deviceModelService.get(deviceModelEntity);
        	RSDevice device = new RSDevice();
    		device.setBrandId(brandId);
    		device.setDeviceModelId(deviceModelId);
    		device.setDeviceModelName(deviceModelEntity.getName());
    		device.setId(StringUtils.getUUID()+"@@@"+((JSONObject)JSON.parse(sb.toString())).getString("result"));
    		device.setImgUrl(deviceModelEntity.getImgUrl());
    		device.setRoomId(roomId);
    		device.setName(barcode);
    		device.setCategoryCode(deviceType);
    		body.put("deviceId", ((JSONObject)JSON.parse(sb.toString())).getString("result"));
    		device.setJson(JSON.json(body));
    		deviceService.add(device);
        	
    	}else{
	        json.put("msg", "添加失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="添加探测器", notes="添加探测器")
    @ResponseBody
    @RequestMapping(value={"addDetectorNew"}, method= RequestMethod.POST)
    public String addDetectorNew(@ApiParam(required=true, name="barcode", value="条形码")@RequestParam(name = "barcode")String barcode,
    							@ApiParam(required=true, name="deviceId", value="设备ID")@RequestParam(name = "deviceId")String deviceId,
    							@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId) throws Exception {
    	
    	
    	JSONObject json = new JSONObject();
    	
    	Map<String,Object> body = new HashMap<String,Object>();
    	body.put("barcode", barcode);
    	body.put("deviceId", deviceId.split("@@@")[1]);
    	UMRoom room = roomService.getRoom(roomId);
    	StringBuffer sb = new StringBuffer();
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	sb.append(HaoEnUtils.getHaoEnApi(body, null, "/parts/new", "POST", headerMap,room.getComId(),communitySafetyInfoService));
    	String detectorId = ((JSONObject)JSON.parse(sb.toString())).getString("result");
    	if(StringUtils.isNotBlank(detectorId)){
    		sb.setLength(0);
        	sb.append(HaoEnUtils.getHaoEnApi(null, null, "/parts/"+detectorId, "GET", headerMap,room.getComId(),communitySafetyInfoService));
    		if(!((JSONObject)JSON.parse(sb.toString())).getBoolean("alwaysDefend",true)){
    			body.clear();
            	body.put("masterUnDefend", false);
            	body.put("masterAwayDefend", true);
            	body.put("masterHomeDefend", true);
        		
        		HaoEnUtils.getHaoEnApi(body, null, "/parts/"+detectorId, "PUT", headerMap,room.getComId(),communitySafetyInfoService);
    		}
    		
	        json.put("msg", "添加成功");
			json.put("status", "0");
    	}else{
	        json.put("msg", "添加失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
        
    @ApiOperation(value="添加探测器", notes="添加探测器")
    @ResponseBody
    @RequestMapping(value={"addDetector"}, method= RequestMethod.POST)
    public String addDetector(@ApiParam(required=true, name="barcode", value="条形码")@RequestParam(name = "barcode")String barcode,
    							@ApiParam(required=true, name="deviceId", value="设备ID")@RequestParam(name = "deviceId")String deviceId,
    							@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId) throws Exception {
    	
    	
    	JSONObject json = new JSONObject();
    	
    	Map<String,Object> body = new HashMap<String,Object>();
    	body.put("barcode", barcode);
    	body.put("deviceId", deviceId.split("@@@")[1]);
    	UMRoom room = roomService.getRoom(roomId);
    	StringBuffer sb = new StringBuffer();
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	sb.append(HaoEnUtils.getHaoEnApi(body, null, "/parts", "POST", headerMap,room.getComId(),communitySafetyInfoService));
    	String detectorId = ((JSONObject)JSON.parse(sb.toString())).getString("result");
    	if(StringUtils.isNotBlank(detectorId)){
    		sb.setLength(0);
        	sb.append(HaoEnUtils.getHaoEnApi(null, null, "/parts/"+detectorId, "GET", headerMap,room.getComId(),communitySafetyInfoService));
    		if(!((JSONObject)JSON.parse(sb.toString())).getBoolean("alwaysDefend",true)){
    			body.clear();
            	body.put("masterUnDefend", false);
            	body.put("masterAwayDefend", true);
            	body.put("masterHomeDefend", true);
        		
        		HaoEnUtils.getHaoEnApi(body, null, "/parts/"+detectorId, "PUT", headerMap,room.getComId(),communitySafetyInfoService);
    		}
    		
	        json.put("msg", "添加成功");
			json.put("status", "0");
    	}else{
	        json.put("msg", "添加失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="删除探测器", notes="删除探测器")
    @ResponseBody
    @RequestMapping(value={"deleteDetector"}, method= RequestMethod.POST)
    public String deleteDetector(
    							@ApiParam(required=true, name="detectorId", value="探测器Id")@RequestParam(name = "detectorId")String detectorId,
    							@ApiParam(required=true, name="roomId", value="住房Id")@RequestParam(name = "roomId")String roomId) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	StringBuffer sb = new StringBuffer();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	sb.append(HaoEnUtils.getHaoEnApi(null, null, "/parts/"+detectorId, "DELETE", headerMap,room.getComId(),communitySafetyInfoService));
    	
//    	sendPost(urlHead+"/parts/"+detectorId, "", "", sb);
    	if(1==(((JSONObject)JSON.parse(sb.toString())).getInt("result",0))){
	        json.put("msg", "删除成功");
			json.put("status", "0");
    	}else{
	        json.put("msg", "删除失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="修改探测器名称", notes="修改探测器名称")
    @ResponseBody
    @RequestMapping(value={"updateDetector"}, method= RequestMethod.POST)
    public String updateDetector(@ApiParam(required=true, name="detectorId", value="探测器序列号")@RequestParam(name = "detectorId")String detectorId,
    							@ApiParam(required=true, name="name", value="探测器名称")@RequestParam(name = "name")String name,
    							@ApiParam(required=true, name="roomId", value="住房Id")@RequestParam(name = "roomId")String roomId
    							) throws Exception {
    	JSONObject json = new JSONObject();
    	
		StringBuffer sb = new StringBuffer();
		
		UMRoom room = roomService.getRoom(roomId);
		String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	Map<String,Object> body = new HashMap<String,Object>();
    	body.put("name", name);
    	sb.append(HaoEnUtils.getHaoEnApi(body, null, "/parts/"+detectorId, "PUT", headerMap,room.getComId(),communitySafetyInfoService));
    	JSONObject resultJson = (JSONObject)JSON.parse(sb.toString());
    	if(1==(resultJson.getInt("result",0))){
	        json.put("msg", "修改成功");
			json.put("status", "0");
    	}else{
	        json.put("msg", "修改失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    
    @ApiOperation(value="修改设备名称", notes="修改设备名称")
    @ResponseBody
    @RequestMapping(value={"updateDevice"}, method= RequestMethod.POST)
    public String updateDevice(@ApiParam(required=true, name="deviceId", value="设备ID")@RequestParam(name = "deviceId")String deviceId,
    							@ApiParam(required=true, name="name", value="探测器名称")@RequestParam(name = "name")String name) throws Exception {
    	JSONObject json = new JSONObject();
    	RSDevice device = new RSDevice();
    	device.setId(deviceId);
    	device.setName(name);
    	if(deviceService.update(device)){
	        json.put("msg", "修改成功");
			json.put("status", "0");
    	}else{
	        json.put("msg", "修改失败");
			json.put("status", "1");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="获取登录token", notes="获取登录token")
    @ResponseBody
    @RequestMapping(value={"getToken"}, method= RequestMethod.GET)
    public String getToken(String roomId) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
		json.put("data", HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService));
        json.put("msg", "成功");
		json.put("status", "0");
    	return JSON.json(json);
    }
    
    @ApiOperation(value="获取设备秘钥", notes="获取设备秘钥")
    @ResponseBody
    @RequestMapping(value={"getEncryptKey"}, method= RequestMethod.GET)
    public String getEncryptKey(
    							@ApiParam(required=true, name="wifiType", value="wifi类型")@RequestParam(name = "wifiType")String wifiType,
    							@ApiParam(required=true, name="roomId", value="住房ID")@RequestParam(name = "roomId")String roomId) throws Exception {
    	
    	JSONObject json = new JSONObject();
    	StringBuffer sb = new StringBuffer();
    	
    	UMRoom room = roomService.getRoom(roomId);
    	
    	String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
    	
    	if(StringUtils.isNotBlank(token)&&"erroe".equals(token)){
    		json.put("msg", "token无效");
			json.put("status", "1");
    	}else{
	    	Map<String,String> headerMap = new HashMap<String,String>();
	    	headerMap.put("Authorization","Bearer " + token);
	    	logger.info("token："+token);
	    	sb.append(HaoEnUtils.getHaoEnApi(null, null, "/devices/encrypt/"+wifiType, "GET",headerMap,room.getComId(),communitySafetyInfoService));
	    	
    		json.put("data", ((JSONObject)JSON.parse(sb.toString())));
	        json.put("msg", "成功");
			json.put("status", "0");
    	}
    	return JSON.json(json);
    }
    
    @ApiOperation(value="接收豪恩推送POST接口", notes="接收豪恩推送POST接口")
    @ResponseBody
    @RequestMapping(value={"receiveMsg"}, method= RequestMethod.POST)
    public String receiveMsg(@ApiParam(required=true, name="msg", value="接收豪恩推送消息")@RequestBody(required=true)HaoenAlarmMessageEntity msg) throws Exception {
    	try{
    		logger.info("豪恩事件推送接口触发。");
    		String result = "";
    		String value = "";
    		Pattern p = Pattern.compile("\\s*|\t|\r|\n");
    		Matcher m = p.matcher(msg.getValue());
    		value = m.replaceAll("");
    		logger.info("解码前的value:"+msg.getValue());
    		logger.info("解码前的value替换换行符等特殊字符:"+value);
    		Map<String,Object> communitySafetyInfoParam = new HashMap<String,Object>();
    		communitySafetyInfoParam.put("brandId", "2");
    		List<RSCommunitySafetyInfo> communitySafetyInfoList = communitySafetyInfoService.getList(communitySafetyInfoParam);
    		for(RSCommunitySafetyInfo communitySafetyInfo : communitySafetyInfoList){
    			try{
	    			String key = communitySafetyInfo.getAppSecret();
	        		Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
	        		DESKeySpec desKeySpec = new DESKeySpec(key.getBytes("UTF-8"));
	        		SecretKeyFactory factory = SecretKeyFactory.getInstance("DES");
	        		SecretKey secretKey = factory.generateSecret(desKeySpec);
	        		byte[] bytes = Base64Utils.decode(value);
	        		cipher.init(Cipher.DECRYPT_MODE, secretKey);
	        		result = new String(cipher.doFinal(bytes));
	        		JSON.parse(result);
	        		break;
    			}catch(Exception e){
    				logger.info("豪恩推送解码失败：" + communitySafetyInfo.getAppSecret() + "------------" + communitySafetyInfo.getComId());
    			}
    		}
    		
    		logger.info("接收到豪恩事件推送数据：" + result);
    		JSONObject json = (JSONObject)JSON.parse(result);
    		if("AlarmEvent".equals(json.getString("iotpResource"))){
    			RSDevice device = new RSDevice();
				device = deviceService.getBySerial("\""+json.getObject("content").getInt("deviceId",0)+"\"");
				UMRoom room = roomService.getRoom(device.getRoomId());
				if ("1".equals(room.getDelayAlarm())) {
					Boolean needAlarm = DelayAlarmService.delayAlarm(room, appService);
					if (needAlarm) {
						processMessage(room, json, device);
					} else {
						logger.info("不需要再推送");
					}
				} else {
					processMessage(room, json, device);
				};
    		}
    	}catch(Exception e){
    		logger.info("豪恩推送消息接收处理失败",e);
    	}
    	return "success";
    }
    
    public static void main(String[] args) throws Exception {
    	String token = HaoEnUtils.getTokenStrTest();
    	Map<String,String> headerMap = new HashMap<String,String>();
    	headerMap.put("Authorization","Bearer " + token);
    	StringBuffer sb = new StringBuffer();
    	sb.append(HaoEnUtils.getHaoEnApiTest(null, null, "/devices/"+"1595", "DELETE", headerMap));
    	System.out.println(sb);
	}
    
    private void processMessage(UMRoom room,JSONObject json, RSDevice device ) throws Exception {
    	String imgUrl = AppContext.getInstance().getProperty("imgBackGround");
    	RSAlarmMessage alarmMessage = new RSAlarmMessage();
		alarmMessage.setDeviceName(device.getName());
		alarmMessage.setId(StringUtils.getUUID());
		alarmMessage.setBrandId(device.getBrandId());
		alarmMessage.setRoomId(device.getRoomId());
//		alarmMessage.setMsgType(message.getMsgType());
		JSONArray array = json.getObject("content").getArray("events");
		String events = "";
		for(int i = 0 ; i < array.length() ; i++){
			events += array.getString(i);
			if(i < array.length()-1){
				events += ",";
			}
		}
		alarmMessage.setAlarmType(events);
		
		long time = Long.valueOf(json.getObject("content").getLong("alarmTime", 0)+"000");
		Date date = new Date(time);
		alarmMessage.setTime(DateUtils.format(date,"yyyy-MM-dd HH:mm:ss"));
		alarmMessage.setDeviceSerial(String.valueOf(json.getObject("content").getInt("deviceId",0)));
		alarmMessage.setDetectorSerial(String.valueOf(json.getObject("content").getInt("devicePartId",0)));
		alarmMessage.setComId(room.getComId());
		alarmMessage.setBuildingId(room.getBuilding());
		alarmMessage.setIsReadApp("0");
		alarmMessage.setIsReadPc("0");
		alarmMessage.setDeleteStatusApp("1");
		alarmMessage.setDeleteStatusPc("1");
		alarmMessage.setFloorId(room.getFloor());
//		alarmMessage.setAlarmPicUrl(message.getPicUrl());
//		alarmMessage.setChannelNo(message.getCn());
		try{
			if(StringUtils.isNotBlank(alarmMessage.getDetectorSerial())){
				String token = HaoEnUtils.getTokenStr(room.getComId(),communitySafetyInfoService);
				Map<String,String> headerMap = new HashMap<String,String>();
		    	headerMap.put("Authorization","Bearer " + token);
		    	logger.info("token："+token);
		    	String partResult = HaoEnUtils.getHaoEnApi(null, null, "/parts/"+alarmMessage.getDetectorSerial(), "GET",headerMap,room.getComId(),communitySafetyInfoService);
				
		    	JSONObject partJson = (JSONObject)JSON.parse(partResult);
		    	
				alarmMessage.setDetectorName(partJson.getString("name"));
				
				if(StringUtils.isBlank(alarmMessage.getDetectorName())){
					alarmMessage.setDetectorName(haoenCategoryCode.get(String.valueOf(partJson.getInt("type",0))));
    			}
				alarmMessage.setAlarmDeviceImgUrl(imgUrl+haoenCategoryCodeImg.get(String.valueOf(partJson.getInt("type",0))));
			}else{
				alarmMessage.setAlarmDeviceImgUrl(device.getImgUrl());
			}
		}catch(Exception e){
			logger.info("豪恩报警消息查询豪恩接口出错",e);
		}
		alarmMessage.setAlarmTypeName(SafeTyUtils.getHaoenAlarmTypeName(alarmMessage.getAlarmType()));
		alarmMessageService.add(alarmMessage);
		//开始进行报警推送到APP
		
		try{
			logger.info("推送豪恩报警消息到APP");
	    	UMProRoom proRoom = new UMProRoom();
	    	proRoom.setRoomId(device.getRoomId());
	    	proRoom.setCheckStatus("1");
	    	List<UMProRoom> list = proRoomService.getList(proRoom);
	    	List<UMRoomSendIdLink> roomSendList = new ArrayList<UMRoomSendIdLink>();
	    	for(UMProRoom proRoomEntity : list){
	    		RSUserMsg userMsg = new RSUserMsg();
	    		UMProprietor proprietor = proprietorService.getProprietor(proRoomEntity.getProId());
	    		if(proprietor != null && StringUtils.isNotBlank(proprietor.getAppUserId())){
	    			roomSendList.addAll(roomSendService.getProSendIdLinksByProId(proprietor.getAppUserId()));
	    			userMsg.setUserId(proprietor.getAppUserId());
	    			userMsg.setComId(proprietor.getComId());
	    		}
	    		UMProprietorFamily proprietorFamily = proprietorFamilyService.getProprietor(proRoomEntity.getProId());
	    		if(proprietorFamily != null && StringUtils.isNotBlank(proprietorFamily.getAppUserId())){
	    			roomSendList.addAll(roomSendService.getProSendIdLinksByProId(proprietorFamily.getAppUserId()));
	    			userMsg.setUserId(proprietorFamily.getAppUserId());
	    			userMsg.setComId(proprietorFamily.getComId());
	    		}
	    		userMsg.setMsgId(alarmMessage.getId());
	    		userMsg.setMsgType("alarm");
	    		userMsg.setReadStatus("0");
    			userMsgService.add(userMsg);
    			try{
    				if(StringUtils.isNotBlank(room.getPadMac())){
	    				userMsg.setUserId(room.getPadMac());
	    				userMsgService.add(userMsg);
    				}
    			}catch(Exception e){
    				logger.info("添加大屏未读消息统计数据出错！！",e);
    			}
	    	}
	    	
	    	Map<String,String> map = new HashMap<String,String>();
	    	RSCommunity community = communityService.getCommunity(room.getComId());
	    	RSFloor floor = floorService.getFloor(room.getFloor());
	    	map.put("alert", "报警消息");
	    	map.put("msg", "您"+community.getCommunityName()+floor.getFloorNumber()+"-"+room.getRoomNumber()+(StringUtils.isBlank(alarmMessage.getDetectorName())?alarmMessage.getDeviceName():alarmMessage.getDetectorName())+alarmMessage.getAlarmTypeName());
	    	map.put("type", "1");
	    	map.put("safetyType", alarmMessage.getAlarmType());
	    	PushUtils.push(map,roomSendList,room.getComId(),"1");
	    	roomSendList.clear();
	    	if(StringUtils.isNotBlank(room.getPadMac())){
	    		roomSendList.addAll(roomSendService.getProSendIdLinksByProId(room.getPadMac()));
	    	}
	    	map.clear();
	    	map.put("type", "1");
	    	map.put("safetyType", alarmMessage.getAlarmType());
	    	PushUtils.push(map,roomSendList,room.getComId(),"2");
	    	try{
		    	//推送物业端
		    	Map<String,Object> param = new HashMap<String,Object>();
	    		param.put("comId", room.getComId());
	    		param.put("isReadPc", "0");
	    		param.put("deleteStatusPc", "1");
	    		Push2WebMsg msgPush = new Push2WebMsg("102", alarmMessageService.getList(param)==null?0:alarmMessageService.getList(param).size());
	    		try{
	    			if(msgPush.getUnReadCount()>0){
			    		if(MessagePushSocketServer.getInstance().sendMessage(room.getComId(), msgPush)){
			    			logger.info("报警消息推送物业端成功！！！-------"+msgPush.getUnReadCount());
			    		}else{
			    			logger.info("报警消息推送物业端失败！！！-------");
			    		}
	    			}
	    		}catch(Exception e){
	    			logger.info("报警消息推送物业端失败！！！"+e.getMessage());
	    		}
	    	}catch(Exception e){
	    		logger.info("报警消息物业推送出错",e);
	    	}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
	}
}
