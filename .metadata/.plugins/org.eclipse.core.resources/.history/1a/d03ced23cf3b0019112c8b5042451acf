package com.porui.webapi.system.controller.safety;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.porui.hjl.app.crestron.service.IAppService;
import com.porui.hjl.commons.bean.socket.Push2WebMsg;
import com.porui.hjl.commons.utils.DateUtils;
import com.porui.hjl.commons.utils.StringUtils;
import com.porui.hjl.provider.res.entity.community.RSCommunity;
import com.porui.hjl.provider.res.entity.community.RSFloor;
import com.porui.hjl.provider.res.entity.msg.RSUserMsg;
import com.porui.hjl.provider.res.entity.safety.RSAlarmMessage;
import com.porui.hjl.provider.res.service.community.ICommunityService;
import com.porui.hjl.provider.res.service.community.IFloorService;
import com.porui.hjl.provider.res.service.msg.IUserMsgService;
import com.porui.hjl.provider.res.service.safety.IAlarmMessageService;
import com.porui.hjl.provider.user.entity.UMProRoom;
import com.porui.hjl.provider.user.entity.UMProprietor;
import com.porui.hjl.provider.user.entity.UMProprietorFamily;
import com.porui.hjl.provider.user.entity.UMRoom;
import com.porui.hjl.provider.user.entity.UMRoomSendIdLink;
import com.porui.hjl.provider.user.service.IProRoomService;
import com.porui.hjl.provider.user.service.IProprietorFamilyService;
import com.porui.hjl.provider.user.service.IProprietorService;
import com.porui.hjl.provider.user.service.IRoomSendService;
import com.porui.hjl.provider.user.service.IRoomService;
import com.porui.webapi.system.socket.MessagePushSocketServer;
import com.porui.webapi.system.util.DelayAlarmUtils;
import com.porui.webapi.system.util.PushUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;


/**
 * Crestron安防
 * Created by pichun on 2017-04-01.
 */
@Api(value = "Crestron安防接口",description = "Crestron安防")
@RestController
@RequestMapping(value = "/api/crestron")
public class CrestronController {
	
    private Logger logger= LoggerFactory.getLogger(CrestronController.class);
    
    @Autowired
    private ICommunityService communityService;
	
	@Autowired
    private IFloorService floorService;
    
    @Autowired
    private IRoomService roomService;
    
    @Autowired
    private IAlarmMessageService alarmMessageService;
    
    @Autowired
    private IProRoomService proRoomService;
    
    @Autowired
    private IProprietorService proprietorService;
    
    @Autowired
    private IProprietorFamilyService proprietorFamilyService;
    
    @Autowired
    private IRoomSendService roomSendService;
    
    @Autowired
    private IUserMsgService userMsgService;
    
    @Autowired
    private IAppService	appService;
    
    @ApiOperation(value="接收Crestron推送POST接口", notes="接收Crestron推送POST接口")
    @ResponseBody
    @RequestMapping(value={"receiveMsg"}, method= RequestMethod.POST)
    public String receiveMsg(
    		@ApiParam(required=true, name="deviceMac", value="中控mac")@RequestParam(required=true)String deviceMac,
    		@ApiParam(required=false, name="positionName", value="位置信息")@RequestParam(required=false)String positionName,
    		@ApiParam(required=false, name="alarmType", value="报警类型")@RequestParam(required=false)String alarmType
    		) throws Exception {
    	try{
    		logger.info("Crestron事件推送接口触发。");
			UMRoom room = roomService.getRoomByDeviceMac(deviceMac);
			
			if ("1".equals(room.getDelayAlarm())) {
				Boolean needAlarm = DelayAlarmUtils.delayAlarm(room, appService);
				if (needAlarm) {
					processMessage(room, positionName, alarmType);
				} else {
					logger.info("不需要再推送");
				}
				
			} else {
				processMessage(room, positionName, alarmType);
			}
			
			
    	}catch(Exception e){
    		logger.info("Crestron推送消息接收处理失败",e);
    	}
    	return "success";
    }
    
    private void processMessage(UMRoom room, String positionName, String alarmType) throws Exception {
    	
    	RSAlarmMessage alarmMessage = new RSAlarmMessage();
		alarmMessage.setDeviceName(positionName);
		alarmMessage.setId(StringUtils.getUUID());
		alarmMessage.setBrandId("4");
		alarmMessage.setRoomId(room.getId());
		alarmMessage.setAlarmType(alarmType);
		alarmMessage.setTime(DateUtils.format("yyyy-MM-dd HH:mm:ss"));
		alarmMessage.setComId(room.getComId());
		alarmMessage.setBuildingId(room.getBuilding());
		alarmMessage.setIsReadApp("0");
		alarmMessage.setIsReadPc("0");
		alarmMessage.setDeleteStatusApp("1");
		alarmMessage.setDeleteStatusPc("1");
		alarmMessage.setFloorId(room.getFloor());
		alarmMessage.setAlarmTypeName("有人");
		alarmMessageService.add(alarmMessage);
		//开始进行报警推送到APP
		try{
			
			DelayAlarmUtils.sendStartAudibleAlarm(appService, room.getDeviceMac());
			
			logger.info("推送Crestron报警消息到APP");
	    	UMProRoom proRoom = new UMProRoom();
	    	proRoom.setRoomId(room.getId());
	    	proRoom.setCheckStatus("1");
	    	List<UMProRoom> list = proRoomService.getList(proRoom);
	    	List<UMRoomSendIdLink> roomSendList = new ArrayList<UMRoomSendIdLink>();
	    	for(UMProRoom proRoomEntity : list){
	    		RSUserMsg userMsg = new RSUserMsg();
	    		UMProprietor proprietor = proprietorService.getProprietor(proRoomEntity.getProId());
	    		if(proprietor != null && StringUtils.isNotBlank(proprietor.getAppUserId())){
	    			roomSendList.addAll(roomSendService.getProSendIdLinksByProId(proprietor.getAppUserId()));
	    			userMsg.setUserId(proprietor.getAppUserId());
	    			userMsg.setComId(proprietor.getComId());
	    		}
	    		UMProprietorFamily proprietorFamily = proprietorFamilyService.getProprietor(proRoomEntity.getProId());
	    		if(proprietorFamily != null && StringUtils.isNotBlank(proprietorFamily.getAppUserId())){
	    			roomSendList.addAll(roomSendService.getProSendIdLinksByProId(proprietorFamily.getAppUserId()));
	    			userMsg.setUserId(proprietorFamily.getAppUserId());
	    			userMsg.setComId(proprietorFamily.getComId());
	    		}
	    		userMsg.setMsgId(alarmMessage.getId());
	    		userMsg.setMsgType("alarm");
	    		userMsg.setReadStatus("0");
    			userMsgService.add(userMsg);
    			try{
    				if(StringUtils.isNotBlank(room.getPadMac())){
	    				userMsg.setUserId(room.getPadMac());
	    				userMsgService.add(userMsg);
    				}
    			}catch(Exception e){
    				logger.info("添加大屏未读消息统计数据出错！！",e);
    			}
	    	}
	    	
	    	Map<String,String> map = new HashMap<String,String>();
	    	RSCommunity community = communityService.getCommunity(room.getComId());
	    	RSFloor floor = floorService.getFloor(room.getFloor());
	    	map.put("alert", "报警消息");
	    	map.put("msg", "您"+community.getCommunityName()+floor.getFloorNumber()+"-"+room.getRoomNumber()+(StringUtils.isBlank(alarmMessage.getDetectorName())?alarmMessage.getDeviceName():alarmMessage.getDetectorName())+alarmMessage.getAlarmTypeName());
	    	map.put("type", "1");
	    	map.put("safetyType", alarmMessage.getAlarmType());
	    	PushUtils.push(map,roomSendList,room.getComId(),"1");
	    	roomSendList.clear();
	    	if(StringUtils.isNotBlank(room.getPadMac())){
	    		roomSendList.addAll(roomSendService.getProSendIdLinksByProId(room.getPadMac()));
	    	}
	    	map.clear();
	    	map.put("type", "1");
	    	map.put("safetyType", alarmMessage.getAlarmType());
	    	PushUtils.push(map,roomSendList,room.getComId(),"2");
	    	try{
		    	//推送物业端
		    	Map<String,Object> param = new HashMap<String,Object>();
	    		param.put("comId", room.getComId());
	    		param.put("isReadPc", "0");
	    		param.put("deleteStatusPc", "1");
	    		Push2WebMsg msgPush = new Push2WebMsg("102", alarmMessageService.getList(param)==null?0:alarmMessageService.getList(param).size());
	    		try{
	    			if(msgPush.getUnReadCount()>0){
			    		if(MessagePushSocketServer.getInstance().sendMessage(room.getComId(), msgPush)){
			    			logger.info("报警消息推送物业端成功！！！-------"+msgPush.getUnReadCount());
			    		}else{
			    			logger.info("报警消息推送物业端失败！！！-------");
			    		}
	    			}
	    		}catch(Exception e){
	    			logger.info("报警消息推送物业端失败！！！"+e.getMessage());
	    		}
	    	}catch(Exception e){
	    		logger.info("报警消息物业推送出错",e);
	    	}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
	}
    
}
